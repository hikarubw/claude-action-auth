#!/bin/bash
# Claude OAuth - Unified CLI tool for Claude Code GitHub OAuth setup

set -e

# Version
VERSION="2.0.0"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Default action
ACTION=""

# Show help
show_help() {
    echo -e "${BLUE}Claude OAuth CLI v${VERSION}${NC}"
    echo ""
    echo "Setup OAuth authentication for Claude Code GitHub Actions"
    echo ""
    echo "Usage: claude-oauth [command] [options]"
    echo ""
    echo "Commands:"
    echo "  setup        Configure OAuth for current repository"
    echo "  install      Install GitHub Action workflow"
    echo "  uninstall    Remove OAuth configuration"
    echo "  test         Verify OAuth setup"
    echo "  help         Show this help message"
    echo ""
    echo "Options:"
    echo "  --version    Show version information"
    echo "  --verbose    Enable verbose output"
    echo ""
    echo "Examples:"
    echo "  claude-oauth setup       # Full OAuth setup"
    echo "  claude-oauth install     # Just install workflow"
    echo "  claude-oauth test        # Verify configuration"
}

# Check dependencies
check_dependencies() {
    local missing=()
    
    for cmd in gh jq git; do
        if ! command -v $cmd &> /dev/null; then
            missing+=($cmd)
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        echo -e "${RED}Error: Missing required dependencies:${NC}"
        for cmd in "${missing[@]}"; do
            case $cmd in
                gh)
                    echo "  - gh: Install from https://cli.github.com/"
                    ;;
                jq)
                    echo "  - jq: brew install jq (macOS) or apt install jq (Linux)"
                    ;;
                git)
                    echo "  - git: Install from https://git-scm.com/"
                    ;;
            esac
        done
        exit 1
    fi
}

# Get Claude credentials
get_claude_credentials() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS - read from Keychain
        echo "Reading credentials from macOS Keychain..."
        
        local creds=$(security find-generic-password -s "Claude Code-credentials" -w 2>/dev/null || echo "{}")
        ACCESS_TOKEN=$(echo "$creds" | jq -r '.access_token // empty')
        REFRESH_TOKEN=$(echo "$creds" | jq -r '.refresh_token // empty')
        EXPIRES_AT=$(echo "$creds" | jq -r '.expires_at // empty')
    else
        # Linux - read from file
        local cred_file="$HOME/.claude/.credentials.json"
        echo "Reading credentials from $cred_file..."
        
        if [ -f "$cred_file" ]; then
            ACCESS_TOKEN=$(jq -r '.access_token // empty' "$cred_file")
            REFRESH_TOKEN=$(jq -r '.refresh_token // empty' "$cred_file")
            EXPIRES_AT=$(jq -r '.expires_at // empty' "$cred_file")
        fi
    fi
    
    if [ -z "$ACCESS_TOKEN" ] || [ -z "$REFRESH_TOKEN" ]; then
        echo -e "${RED}Error: Claude credentials not found${NC}"
        echo "Please run 'claude login' first"
        exit 1
    fi
    
    echo -e "${GREEN}✓ Found Claude credentials${NC}"
}

# Install workflow
install_workflow() {
    echo -e "${BLUE}Installing Claude GitHub Action workflow...${NC}"
    
    mkdir -p .github/workflows
    
    # Check for local template first
    local template_file="$HOME/.claude-oauth/claude.yml"
    
    if [ -f ".github/workflows/claude.yml" ]; then
        echo -e "${YELLOW}Backing up existing workflow...${NC}"
        cp .github/workflows/claude.yml .github/workflows/claude.yml.bak
    fi
    
    echo "Installing workflow template..."
    
    # Try local template first
    if [ -f "$template_file" ]; then
        cp "$template_file" .github/workflows/claude.yml
        echo -e "${GREEN}✓ Workflow installed from local template${NC}"
        return 0
    fi
    
    # Fall back to downloading
    local workflow_url="https://raw.githubusercontent.com/hikarubw/claude-code-oauth/main/templates/claude.yml"
    echo "Downloading workflow template..."
    if curl -fsSL "$workflow_url" -o .github/workflows/claude.yml; then
        echo -e "${GREEN}✓ Workflow installed${NC}"
        return 0
    else
        echo -e "${RED}Failed to download workflow template${NC}"
        return 1
    fi
}

# Setup OAuth
setup_oauth() {
    echo -e "${BLUE}Setting up Claude OAuth...${NC}"
    echo ""
    
    # Check if in git repo
    if [ ! -d ".git" ]; then
        echo -e "${RED}Error: Not in a git repository${NC}"
        exit 1
    fi
    
    # Check GitHub CLI auth
    if ! gh auth status &>/dev/null; then
        echo -e "${RED}Error: GitHub CLI not authenticated${NC}"
        echo "Run: gh auth login"
        exit 1
    fi
    
    # Get credentials
    get_claude_credentials
    
    # Install workflow if not present
    if [ ! -f ".github/workflows/claude.yml" ]; then
        install_workflow
    fi
    
    # Set GitHub secrets
    echo ""
    echo "Configuring GitHub repository secrets..."
    local repo=$(gh repo view --json nameWithOwner -q .nameWithOwner)
    
    echo "$ACCESS_TOKEN" | gh secret set CLAUDE_ACCESS_TOKEN
    echo "$REFRESH_TOKEN" | gh secret set CLAUDE_REFRESH_TOKEN
    echo "$EXPIRES_AT" | gh secret set CLAUDE_EXPIRES_AT
    
    echo -e "${GREEN}✓ Secrets configured${NC}"
    
    # Success message
    echo ""
    echo -e "${GREEN}=== OAuth Setup Complete! ===${NC}"
    echo ""
    echo "Next steps:"
    echo "1. Review .github/workflows/claude.yml"
    echo "2. Commit and push changes:"
    echo "   git add .github/workflows/claude.yml"
    echo "   git commit -m 'Add Claude OAuth workflow'"
    echo "   git push"
    echo ""
    echo "Claude will respond to @claude mentions in Issues and PRs!"
}

# Test configuration
test_configuration() {
    echo -e "${BLUE}Testing Claude OAuth configuration...${NC}"
    echo ""
    
    local passed=0
    local failed=0
    
    # Test 1: Git repository
    echo -n "Git repository check... "
    if [ -d ".git" ]; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    else
        echo -e "${RED}FAIL${NC}"
        ((failed++))
    fi
    
    # Test 2: Workflow exists
    echo -n "Workflow file check... "
    if [ -f ".github/workflows/claude.yml" ]; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    else
        echo -e "${RED}FAIL${NC}"
        ((failed++))
    fi
    
    # Test 3: GitHub CLI auth
    echo -n "GitHub CLI authentication... "
    if gh auth status &>/dev/null; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    else
        echo -e "${RED}FAIL${NC}"
        ((failed++))
    fi
    
    # Test 4: Secrets exist
    echo -n "GitHub secrets check... "
    if gh secret list | grep -q "CLAUDE_ACCESS_TOKEN"; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    else
        echo -e "${RED}FAIL${NC}"
        ((failed++))
    fi
    
    # Test 5: Claude credentials
    echo -n "Claude credentials check... "
    get_claude_credentials &>/dev/null
    if [ $? -eq 0 ]; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    else
        echo -e "${RED}FAIL${NC}"
        ((failed++))
    fi
    
    # Summary
    echo ""
    echo "===================="
    echo -e "Tests passed: ${GREEN}$passed${NC}"
    echo -e "Tests failed: ${RED}$failed${NC}"
    
    if [ $failed -eq 0 ]; then
        echo -e "${GREEN}All tests passed!${NC}"
        return 0
    else
        echo -e "${RED}Some tests failed!${NC}"
        return 1
    fi
}

# Uninstall
uninstall() {
    echo -e "${YELLOW}Uninstalling Claude OAuth...${NC}"
    echo ""
    
    # Remove secrets
    if gh auth status &>/dev/null; then
        echo "Removing GitHub secrets..."
        gh secret delete CLAUDE_ACCESS_TOKEN 2>/dev/null || true
        gh secret delete CLAUDE_REFRESH_TOKEN 2>/dev/null || true
        gh secret delete CLAUDE_EXPIRES_AT 2>/dev/null || true
    fi
    
    # Remove workflow
    if [ -f ".github/workflows/claude.yml" ]; then
        echo "Removing workflow file..."
        rm -f .github/workflows/claude.yml
        
        # Restore backup if exists
        if [ -f ".github/workflows/claude.yml.bak" ]; then
            echo "Restoring backup..."
            mv .github/workflows/claude.yml.bak .github/workflows/claude.yml
        fi
    fi
    
    echo -e "${GREEN}✓ Uninstall complete${NC}"
}

# Main execution
main() {
    case "$1" in
        setup)
            check_dependencies
            setup_oauth
            ;;
        install)
            install_workflow
            ;;
        test)
            test_configuration
            ;;
        uninstall)
            uninstall
            ;;
        --version)
            echo "claude-oauth v${VERSION}"
            ;;
        help|--help|-h|"")
            show_help
            ;;
        *)
            echo -e "${RED}Unknown command: $1${NC}"
            echo "Run 'claude-oauth help' for usage"
            exit 1
            ;;
    esac
}

# Run main function
main "$@"