#!/bin/bash
# Configure Claude Code GitHub Action for OAuth authentication

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${BLUE}=== Claude OAuth Setup ===${NC}"
echo ""

# Check if in git repository
if [ ! -d ".git" ]; then
    echo -e "${RED}Error: Not in a git repository${NC}"
    echo "Please run this from your project root"
    exit 1
fi

# Check dependencies
for cmd in gh jq; do
    if ! command -v $cmd &> /dev/null; then
        echo -e "${RED}Error: $cmd is required but not installed${NC}"
        case $cmd in
            gh)
                echo "Install GitHub CLI: https://cli.github.com/"
                ;;
            jq)
                echo "Install jq:"
                echo "  macOS: brew install jq"
                echo "  Ubuntu: sudo apt-get install jq"
                ;;
        esac
        exit 1
    fi
done

# Check GitHub CLI auth
if ! gh auth status &>/dev/null; then
    echo -e "${RED}Error: GitHub CLI is not authenticated${NC}"
    echo "Run: gh auth login"
    exit 1
fi

# Get Claude credentials based on platform
get_claude_credentials() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS - read from Keychain
        echo "Reading credentials from macOS Keychain..."
        
        ACCESS_TOKEN=$(security find-generic-password -s "Claude Code-credentials" -w 2>/dev/null | jq -r '.access_token' 2>/dev/null || echo "")
        REFRESH_TOKEN=$(security find-generic-password -s "Claude Code-credentials" -w 2>/dev/null | jq -r '.refresh_token' 2>/dev/null || echo "")
        EXPIRES_AT=$(security find-generic-password -s "Claude Code-credentials" -w 2>/dev/null | jq -r '.expires_at' 2>/dev/null || echo "")
    else
        # Linux - read from file
        CRED_FILE="$HOME/.claude/.credentials.json"
        echo "Reading credentials from $CRED_FILE..."
        
        if [ -f "$CRED_FILE" ]; then
            ACCESS_TOKEN=$(jq -r '.access_token' "$CRED_FILE" 2>/dev/null || echo "")
            REFRESH_TOKEN=$(jq -r '.refresh_token' "$CRED_FILE" 2>/dev/null || echo "")
            EXPIRES_AT=$(jq -r '.expires_at' "$CRED_FILE" 2>/dev/null || echo "")
        fi
    fi
    
    if [ -z "$ACCESS_TOKEN" ] || [ -z "$REFRESH_TOKEN" ]; then
        echo -e "${RED}Error: Claude credentials not found${NC}"
        echo "Please run 'claude login' first"
        exit 1
    fi
}

# Create workflow directory
mkdir -p .github/workflows

# Get the script directory
SCRIPT_DIR="$(cd "$(dirname "${BASH_SOURCE[0]}")" && pwd)"
TOOLS_ROOT="$(cd "$SCRIPT_DIR/.." && pwd)"

# Create OAuth workflow
create_workflow() {
    # Check if template exists in the tools repository
    TEMPLATE_FILE="$TOOLS_ROOT/.github/workflows/claude.yml"
    
    if [ -f "$TEMPLATE_FILE" ]; then
        echo "Using advanced workflow template..."
        cp "$TEMPLATE_FILE" .github/workflows/claude.yml
        
        # Update to use OAuth (if needed)
        if grep -q "anthropic_api_key" .github/workflows/claude.yml; then
            echo "Converting to OAuth authentication..."
            # Update the action to use OAuth
            sed -i.bak 's/uses: anthropics\/claude-code-action@[^[:space:]]*/uses: hikarubw\/claude-code-action@oauth/g' .github/workflows/claude.yml
            sed -i.bak '/anthropic_api_key:/d' .github/workflows/claude.yml
            
            # Add OAuth configuration after the uses line
            awk '/uses: hikarubw\/claude-code-action@oauth/ {
                print $0
                print "        with:"
                print "          use_oauth: true"
                print "          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}"
                print "          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}"
                print "          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}"
                next
            }
            {print}' .github/workflows/claude.yml.bak > .github/workflows/claude.yml
            
            rm -f .github/workflows/claude.yml.bak
        fi
    else
        echo "Creating basic OAuth workflow..."
        cat > .github/workflows/claude.yml << 'EOF'
name: Claude Code

on:
  issue_comment:
    types: [created]
  pull_request_review_comment:
    types: [created]
  issues:
    types: [opened, assigned]
  pull_request_review:
    types: [submitted]

jobs:
  claude:
    if: |
      (github.event_name == 'issue_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review_comment' && contains(github.event.comment.body, '@claude')) ||
      (github.event_name == 'pull_request_review' && contains(github.event.review.body, '@claude')) ||
      (github.event_name == 'issues' && (contains(github.event.issue.body, '@claude') || contains(github.event.issue.title, '@claude')))
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
      issues: write
      id-token: write
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 1

      - name: Run Claude Code
        id: claude
        uses: hikarubw/claude-code-action@oauth
        with:
          use_oauth: true
          claude_access_token: ${{ secrets.CLAUDE_ACCESS_TOKEN }}
          claude_refresh_token: ${{ secrets.CLAUDE_REFRESH_TOKEN }}
          claude_expires_at: ${{ secrets.CLAUDE_EXPIRES_AT }}
EOF
    fi
}

# Set GitHub secrets
set_github_secrets() {
    echo ""
    echo "Setting GitHub repository secrets..."
    
    # Get repository info
    REPO=$(gh repo view --json nameWithOwner -q .nameWithOwner)
    
    # Set secrets
    echo "$ACCESS_TOKEN" | gh secret set CLAUDE_ACCESS_TOKEN
    echo "$REFRESH_TOKEN" | gh secret set CLAUDE_REFRESH_TOKEN
    echo "$EXPIRES_AT" | gh secret set CLAUDE_EXPIRES_AT
    
    echo -e "${GREEN}✓ Secrets configured successfully${NC}"
}

# Main execution
echo "Checking for existing workflow..."
if [ -f ".github/workflows/claude.yml" ]; then
    echo "Found existing claude.yml - backing up..."
    cp .github/workflows/claude.yml .github/workflows/claude.yml.bak
fi

# Get credentials
get_claude_credentials

# Create workflow
echo "Creating OAuth workflow..."
create_workflow
echo -e "${GREEN}✓ Created .github/workflows/claude.yml${NC}"

# Set secrets
set_github_secrets

echo ""
echo -e "${GREEN}=== Setup Complete! ===${NC}"
echo ""
echo "Next steps:"
echo "1. Review .github/workflows/claude.yml"
echo "2. Commit and push the workflow:"
echo "   git add .github/workflows/claude.yml"
echo "   git commit -m 'Add Claude OAuth workflow'"
echo "   git push"
echo ""
echo "Claude will now respond to @claude mentions in issues and PRs!"