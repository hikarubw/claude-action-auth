#!/bin/bash
# Claude Action Auth - CLI tool for Claude Code Action authentication setup (OAuth or API Key)

set -e

# Version
VERSION="2.1.0"

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
NC='\033[0m'

# Default action
ACTION=""

# Show help
show_help() {
    echo -e "${BLUE}Claude Action Auth v${VERSION}${NC}"
    echo ""
    echo "Setup authentication for Claude Code Action on GitHub"
    echo ""
    echo "Usage: claude-auth [command] [options]"
    echo ""
    echo "Commands:"
    echo "  setup        Configure authentication (OAuth or API key)"
    echo "  install      Install GitHub Action workflow"
    echo "  uninstall    Remove authentication configuration"
    echo "  test         Verify setup"
    echo "  help         Show this help message"
    echo ""
    echo "Options:"
    echo "  --version    Show version information"
    echo "  --auth-type  Specify auth type: oauth or api (default: asks)"
    echo ""
    echo "Examples:"
    echo "  claude-auth setup                   # Interactive setup"
    echo "  claude-auth setup --auth-type=api   # API key setup"
    echo "  claude-auth setup --auth-type=oauth  # OAuth setup"
}

# Check dependencies
check_dependencies() {
    local missing=()
    
    for cmd in gh jq git; do
        if ! command -v $cmd &> /dev/null; then
            missing+=($cmd)
        fi
    done
    
    if [ ${#missing[@]} -gt 0 ]; then
        echo -e "${RED}Error: Missing required dependencies:${NC}"
        for cmd in "${missing[@]}"; do
            case $cmd in
                gh)
                    echo "  - gh: Install from https://cli.github.com/"
                    ;;
                jq)
                    echo "  - jq: brew install jq (macOS) or apt install jq (Linux)"
                    ;;
                git)
                    echo "  - git: Install from https://git-scm.com/"
                    ;;
            esac
        done
        exit 1
    fi
}

# Get Claude credentials
get_claude_credentials() {
    if [[ "$OSTYPE" == "darwin"* ]]; then
        # macOS - read from Keychain
        echo "Reading credentials from macOS Keychain..."
        
        local creds=$(security find-generic-password -s "Claude Code-credentials" -w 2>/dev/null || echo "{}")
        # Check for nested claudeAiOauth structure first
        if echo "$creds" | jq -e '.claudeAiOauth' >/dev/null 2>&1; then
            ACCESS_TOKEN=$(echo "$creds" | jq -r '.claudeAiOauth.accessToken // empty')
            REFRESH_TOKEN=$(echo "$creds" | jq -r '.claudeAiOauth.refreshToken // empty')
            EXPIRES_AT=$(echo "$creds" | jq -r '.claudeAiOauth.expiresAt // empty')
        else
            # Fallback to direct structure
            ACCESS_TOKEN=$(echo "$creds" | jq -r '.access_token // empty')
            REFRESH_TOKEN=$(echo "$creds" | jq -r '.refresh_token // empty')
            EXPIRES_AT=$(echo "$creds" | jq -r '.expires_at // empty')
        fi
    else
        # Linux - read from file
        local cred_file="$HOME/.claude/.credentials.json"
        echo "Reading credentials from $cred_file..."
        
        if [ -f "$cred_file" ]; then
            local creds=$(cat "$cred_file")
            # Check for nested claudeAiOauth structure first
            if echo "$creds" | jq -e '.claudeAiOauth' >/dev/null 2>&1; then
                ACCESS_TOKEN=$(echo "$creds" | jq -r '.claudeAiOauth.accessToken // empty')
                REFRESH_TOKEN=$(echo "$creds" | jq -r '.claudeAiOauth.refreshToken // empty')
                EXPIRES_AT=$(echo "$creds" | jq -r '.claudeAiOauth.expiresAt // empty')
            else
                # Fallback to direct structure
                ACCESS_TOKEN=$(echo "$creds" | jq -r '.access_token // empty')
                REFRESH_TOKEN=$(echo "$creds" | jq -r '.refresh_token // empty')
                EXPIRES_AT=$(echo "$creds" | jq -r '.expires_at // empty')
            fi
        fi
    fi
    
    if [ -z "$ACCESS_TOKEN" ] || [ -z "$REFRESH_TOKEN" ]; then
        echo -e "${RED}Error: Claude credentials not found${NC}"
        echo "Please run 'claude /login' first"
        exit 1
    fi
    
    echo -e "${GREEN}✓ Found Claude credentials${NC}"
}

# Ask for auth type
ask_auth_type() {
    echo -e "${BLUE}Choose authentication method:${NC}" >&2
    echo "1) OAuth (recommended) - Uses your Claude login" >&2
    echo "2) API Key - Uses Anthropic API key" >&2
    echo "" >&2
    
    while true; do
        read -p "Select (1-2): " choice
        case "$choice" in
            1)
                echo "oauth"
                return
                ;;
            2)
                echo "api"
                return
                ;;
            *)
                echo -e "${RED}Invalid selection. Please enter 1 or 2.${NC}" >&2
                ;;
        esac
    done
}

# Install workflow
install_workflow() {
    local auth_type="${1:-oauth}"
    echo -e "${BLUE}Installing Claude GitHub Action workflow (${auth_type} mode)...${NC}"
    
    mkdir -p .github/workflows
    
    if [ -f ".github/workflows/claude.yml" ]; then
        echo -e "${YELLOW}Backing up existing workflow...${NC}"
        cp .github/workflows/claude.yml .github/workflows/claude.yml.bak
    fi
    
    # Determine template file
    local template_name="claude.yml"
    if [ "$auth_type" = "api" ]; then
        template_name="claude-api.yml"
    fi
    
    # Check for local template first
    local template_file="$HOME/.claude-action-auth/${template_name}"
    
    echo "Installing workflow template..."
    
    # Try local template first
    if [ -f "$template_file" ]; then
        cp "$template_file" .github/workflows/claude.yml
        echo -e "${GREEN}✓ Workflow installed from local template${NC}"
        return 0
    fi
    
    # Fall back to downloading
    local workflow_url="https://raw.githubusercontent.com/hikarubw/claude-action-auth/main/templates/${template_name}"
    echo "Downloading workflow template..."
    if curl -fsSL "$workflow_url" -o .github/workflows/claude.yml; then
        echo -e "${GREEN}✓ Workflow installed${NC}"
        return 0
    else
        echo -e "${RED}Failed to download workflow template${NC}"
        return 1
    fi
}

# Setup API Key
setup_api_key() {
    echo -e "${BLUE}Setting up Claude API Key authentication...${NC}"
    echo ""
    
    # Check if in git repo
    if [ ! -d ".git" ]; then
        echo -e "${RED}Error: Not in a git repository${NC}"
        exit 1
    fi
    
    # Check GitHub CLI auth
    if ! gh auth status &>/dev/null; then
        echo -e "${RED}Error: GitHub CLI not authenticated${NC}"
        echo "Run: gh auth login"
        exit 1
    fi
    
    # Install workflow
    install_workflow "api"
    
    # Instructions for API key
    echo ""
    echo -e "${YELLOW}=== Manual Step Required ===${NC}"
    echo ""
    echo "You need to add your Anthropic API key to GitHub secrets:"
    echo ""
    echo "1. Get your API key from: https://console.anthropic.com/account/keys"
    echo ""
    echo "2. Add it to your repository:"
    echo "   Option A - Using GitHub CLI:"
    echo "   echo 'your-api-key-here' | gh secret set ANTHROPIC_API_KEY --repo \"$(gh repo view --json nameWithOwner -q .nameWithOwner)\""
    echo ""
    echo "   Option B - Using GitHub web interface:"
    echo "   - Go to: https://github.com/$(gh repo view --json nameWithOwner -q .nameWithOwner)/settings/secrets/actions"
    echo "   - Click 'New repository secret'"
    echo "   - Name: ANTHROPIC_API_KEY"
    echo "   - Value: Your API key"
    echo ""
    echo "3. Commit and push the workflow:"
    echo "   git add .github/workflows/claude.yml"
    echo "   git commit -m 'Add Claude API workflow'"
    echo "   git push"
    echo ""
    echo "Claude will respond to @claude mentions in Issues and PRs!"
}

# Setup OAuth
setup_oauth() {
    echo -e "${BLUE}Setting up Claude OAuth...${NC}"
    echo ""
    
    # Check if in git repo
    if [ ! -d ".git" ]; then
        echo -e "${RED}Error: Not in a git repository${NC}"
        exit 1
    fi
    
    # Check GitHub CLI auth
    if ! gh auth status &>/dev/null; then
        echo -e "${RED}Error: GitHub CLI not authenticated${NC}"
        echo "Run: gh auth login"
        exit 1
    fi
    
    # Get credentials
    get_claude_credentials
    
    # Install workflow if not present
    local workflow_installed=false
    if [ ! -f ".github/workflows/claude.yml" ]; then
        install_workflow "oauth"
        workflow_installed=true
    else
        echo -e "${YELLOW}Workflow already exists, skipping installation${NC}"
    fi
    
    # Set GitHub secrets
    echo ""
    echo "Configuring GitHub repository secrets..."
    local repo=$(gh repo view --json nameWithOwner -q .nameWithOwner)
    
    echo "$ACCESS_TOKEN" | gh secret set CLAUDE_ACCESS_TOKEN --repo "$repo"
    echo "$REFRESH_TOKEN" | gh secret set CLAUDE_REFRESH_TOKEN --repo "$repo"
    echo "$EXPIRES_AT" | gh secret set CLAUDE_EXPIRES_AT --repo "$repo"
    
    echo -e "${GREEN}✓ Secrets configured${NC}"
    
    # Success message
    echo ""
    echo -e "${GREEN}=== OAuth Setup Complete! ===${NC}"
    echo ""
    if [ "$workflow_installed" = true ]; then
        echo "Next steps:"
        echo "1. Review .github/workflows/claude.yml"
        echo "2. Commit and push changes:"
        echo "   git add .github/workflows/claude.yml"
        echo "   git commit -m 'Add Claude OAuth workflow'"
        echo "   git push"
    else
        echo "✓ Secrets have been updated for the existing workflow"
        echo "✓ No file changes needed"
    fi
    echo ""
    echo "Claude will respond to @claude mentions in Issues and PRs!"
}

# Main setup function
setup() {
    local auth_type="$1"
    
    # If no auth type specified, ask
    if [ -z "$auth_type" ]; then
        auth_type=$(ask_auth_type)
    fi
    
    case "$auth_type" in
        oauth)
            setup_oauth
            ;;
        api)
            setup_api_key
            ;;
        *)
            echo -e "${RED}Invalid auth type: $auth_type${NC}"
            echo "Valid options: oauth, api"
            exit 1
            ;;
    esac
}

# Test configuration
test_configuration() {
    echo -e "${BLUE}Testing Claude configuration...${NC}"
    echo ""
    
    local passed=0
    local failed=0
    local auth_type=""
    
    # Test 1: Git repository
    echo -n "Git repository check... "
    if [ -d ".git" ]; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    else
        echo -e "${RED}FAIL${NC}"
        ((failed++))
    fi
    
    # Test 2: Workflow exists
    echo -n "Workflow file check... "
    if [ -f ".github/workflows/claude.yml" ]; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
        
        # Detect auth type from workflow
        if grep -q "ANTHROPIC_API_KEY" .github/workflows/claude.yml; then
            auth_type="api"
        elif grep -q "CLAUDE_ACCESS_TOKEN" .github/workflows/claude.yml; then
            auth_type="oauth"
        fi
    else
        echo -e "${RED}FAIL${NC}"
        ((failed++))
    fi
    
    # Test 3: GitHub CLI auth
    echo -n "GitHub CLI authentication... "
    if gh auth status &>/dev/null; then
        echo -e "${GREEN}PASS${NC}"
        ((passed++))
    else
        echo -e "${RED}FAIL${NC}"
        ((failed++))
    fi
    
    # Test 4: Secrets exist (based on auth type)
    echo -n "GitHub secrets check... "
    local repo=$(gh repo view --json nameWithOwner -q .nameWithOwner 2>/dev/null)
    if [ -n "$repo" ]; then
        if [ "$auth_type" = "api" ]; then
            if gh secret list --repo "$repo" | grep -q "ANTHROPIC_API_KEY"; then
                echo -e "${GREEN}PASS (API key)${NC}"
                ((passed++))
            else
                echo -e "${RED}FAIL (ANTHROPIC_API_KEY not found)${NC}"
                ((failed++))
            fi
        elif [ "$auth_type" = "oauth" ]; then
            if gh secret list --repo "$repo" | grep -q "CLAUDE_ACCESS_TOKEN"; then
                echo -e "${GREEN}PASS (OAuth)${NC}"
                ((passed++))
            else
                echo -e "${RED}FAIL (OAuth tokens not found)${NC}"
                ((failed++))
            fi
        else
            echo -e "${YELLOW}SKIP (unknown auth type)${NC}"
        fi
    else
        echo -e "${YELLOW}SKIP (could not determine repository)${NC}"
    fi
    
    # Test 5: Claude credentials (only for OAuth)
    if [ "$auth_type" = "oauth" ]; then
        echo -n "Claude credentials check... "
        get_claude_credentials &>/dev/null
        if [ $? -eq 0 ]; then
            echo -e "${GREEN}PASS${NC}"
            ((passed++))
        else
            echo -e "${RED}FAIL${NC}"
            ((failed++))
        fi
    fi
    
    # Summary
    echo ""
    echo "===================="
    if [ -n "$auth_type" ]; then
        echo "Auth type: $auth_type"
    fi
    echo -e "Tests passed: ${GREEN}$passed${NC}"
    echo -e "Tests failed: ${RED}$failed${NC}"
    
    if [ $failed -eq 0 ]; then
        echo -e "${GREEN}All tests passed!${NC}"
        return 0
    else
        echo -e "${RED}Some tests failed!${NC}"
        return 1
    fi
}

# Uninstall
uninstall() {
    echo -e "${YELLOW}Uninstalling Claude authentication...${NC}"
    echo ""
    
    # Detect auth type from workflow
    local auth_type=""
    if [ -f ".github/workflows/claude.yml" ]; then
        if grep -q "ANTHROPIC_API_KEY" .github/workflows/claude.yml; then
            auth_type="api"
        elif grep -q "CLAUDE_ACCESS_TOKEN" .github/workflows/claude.yml; then
            auth_type="oauth"
        fi
    fi
    
    # Remove secrets
    if gh auth status &>/dev/null; then
        echo "Removing GitHub secrets..."
        local repo=$(gh repo view --json nameWithOwner -q .nameWithOwner 2>/dev/null)
        if [ -n "$repo" ]; then
            if [ "$auth_type" = "api" ]; then
                gh secret delete ANTHROPIC_API_KEY --repo "$repo" 2>/dev/null || true
            else
                gh secret delete CLAUDE_ACCESS_TOKEN --repo "$repo" 2>/dev/null || true
                gh secret delete CLAUDE_REFRESH_TOKEN --repo "$repo" 2>/dev/null || true
                gh secret delete CLAUDE_EXPIRES_AT --repo "$repo" 2>/dev/null || true
            fi
        else
            echo "Warning: Could not determine repository, skipping secret removal"
        fi
    fi
    
    # Remove workflow
    if [ -f ".github/workflows/claude.yml" ]; then
        echo "Removing workflow file..."
        rm -f .github/workflows/claude.yml
        
        # Restore backup if exists
        if [ -f ".github/workflows/claude.yml.bak" ]; then
            echo "Restoring backup..."
            mv .github/workflows/claude.yml.bak .github/workflows/claude.yml
        fi
    fi
    
    echo -e "${GREEN}✓ Uninstall complete${NC}"
}

# Main execution
main() {
    # Parse arguments
    local command=""
    local auth_type=""
    
    for arg in "$@"; do
        case "$arg" in
            --auth-type=*)
                auth_type="${arg#*=}"
                ;;
            --version)
                echo "claude-auth v${VERSION}"
                exit 0
                ;;
            --help|-h)
                show_help
                exit 0
                ;;
            setup|install|test|uninstall|help)
                command="$arg"
                ;;
            *)
                if [ -z "$command" ]; then
                    echo -e "${RED}Unknown command: $arg${NC}"
                    echo "Run 'claude-auth help' for usage"
                    exit 1
                fi
                ;;
        esac
    done
    
    # Default to help if no command
    if [ -z "$command" ]; then
        command="help"
    fi
    
    # Execute command
    case "$command" in
        setup)
            check_dependencies
            setup "$auth_type"
            ;;
        install)
            if [ -n "$auth_type" ]; then
                install_workflow "$auth_type"
            else
                # Ask for auth type
                auth_type=$(ask_auth_type)
                install_workflow "$auth_type"
            fi
            ;;
        test)
            test_configuration
            ;;
        uninstall)
            uninstall
            ;;
        help)
            show_help
            ;;
    esac
}

# Run main function
main "$@"